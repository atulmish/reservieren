apiVersion: v1
kind: ConfigMap
metadata:
  name: reservieren-config
  namespace: bibliothek
data:
  CONTAINER_BOOTCAMP_EINBUCHEN_URL: "http://einbuchen-intern:80/events"
  CONTAINER_BOOTCAMP_AUSLEIHEN_URL: "http://ausleihen-intern:80/events"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_USER: "postgres"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_PASSWORD: "PpOoSsTtGgRrEeSs"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_HOST: "pgpool.infrastruktur"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_DBNAME: "reservieren"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: reservieren-pg-init-config
  namespace: bibliothek
data:
  DB_SUPERUSER: "postgres"
  DB_SUPERUSER_PASSWORD: "PpOoSsTtGgRrEeSs"
  DB_NAME: "reservieren"
  DB_LOCALE: "de_DE.utf-8"
  DB_HOST: "pgpool.infrastruktur"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: reservieren-pg-init-scripts
  namespace: bibliothek
data:
  reservieren-init-db.sh: |
    #!/usr/bin/env bash

    #set -x
    set -e

    DB_LOCALE=${DB_LOCALE:?"DB_LOCALE is required"}

    DB_HOST=${DB_HOST:?"DB_HOST is required"}
    DB_SUPERUSER=${DB_SUPERUSER:?"DB_SUPERUSER is required"}
    DB_SUPERUSER_PASSWORD=${DB_SUPERUSER_PASSWORD:?"DB_SUPERUSER_PASSWORD is required"}
    DB_NAME=${DB_NAME:?"DB_NAME is required"}

    echo ${DB_HOST}":*:*:"${DB_SUPERUSER}":"${DB_SUPERUSER_PASSWORD} > ~/.pgpass
    chmod 0600 ~/.pgpass

    PG_DB_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS ( SELECT 1 from pg_database WHERE datname='${DB_NAME}');"`
    
    PG_COLLATION_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS( select 1 from pg_collation);"`
    if test ${PG_COLLATION_EXISTS} = "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "CREATE COLLATION IF NOT EXISTS german (LOCALE = '${DB_LOCALE}');"
    fi

    if test ${PG_DB_EXISTS} = "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "CREATE DATABASE ${DB_NAME} WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = '${DB_LOCALE}' LC_CTYPE = '${DB_LOCALE}';"
    fi

---

apiVersion: v1
kind: Service
metadata:
  name: reservieren-extern
  namespace: bibliothek
spec:
  ports:
  - port: 8080
    name: web
  selector:
    app: reservieren
    role: backend
    scs: reservieren
    
---

## FÃ¼r das interne SSE Interface
apiVersion: v1
kind: Service
metadata:
  name: reservieren-intern
  namespace: bibliothek
spec:
  ports:
  - port: 80
    name: web
  selector:
    app: reservieren
    role: backend
    scs: reservieren    

---

#####
# ingress to assets, test f.e. with
# curl http://bootcamp.ch.innoq.io/einbuchen/books
#####

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
  name: reservieren
  namespace: bibliothek
spec:
  rules:
  - host: bootcamp.ch.innoq.io
    http:
      paths:
      - path: /reservieren
        backend:
          serviceName: reservieren-extern
          servicePort: 8080

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: reservieren
  namespace: bibliothek
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reservieren
      role: backend
      scs: reservieren
  template:
    metadata:
      labels:
        app: reservieren
        role: backend
        scs: reservieren
    spec:
      initContainers:
      - name: ausleihen-postgres-init
        image: quay.io/containerbootcamp/postgres-init
        envFrom:
        - configMapRef:
            name: reservieren-pg-init-config
        volumeMounts:
        - name: reservieren-init-scripts
          mountPath: /pg-init    
      containers:
      - name: varnish-ssi
        image: quay.io/containerbootcamp/alpine-varnish
      - name: reservieren
        image: quay.io/containerbootcamp/reservieren
        envFrom:
        - configMapRef:
            name: reservieren-config
        ports:
        - containerPort: 80
          protocol: TCP
      - name: jaeger-agent
        image: jaegertracing/jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      volumes:
      - name: reservieren-init-scripts
        configMap:
          name: reservieren-pg-init-scripts